.form-element{:class => field_type, "data-has-custom-field-code" => field.has_custom_field_code?}
  .header
    %h2= field_description.display_name
    = render :partial => "form_partials/element_controls"

    = hidden_field_tag "fields[][id]", field.id, :class => 'form-control', :id => "id"
    = hidden_field_tag "fields[][field_index]", field.field_index, :class => 'form-control', :id => "index"
    = hidden_field_tag "fields[][field_type]", field_type, :class => 'form-control'

  .form-group
    %label.col-sm-3.control-label Question
    .col-sm-9
      = text_field_tag "fields[][field_name]", field.field_name, :class => 'form-control field-name'

  .form-group
    %label.col-sm-3.control-label Hint
    .col-sm-9
      = text_field_tag "fields[][hint]", field.hint, :class => 'form-control'

  - if field_description.has_sample
    .form-group
      %label.col-sm-3.control-label Sample value
      .col-sm-9
        - if field_description.input_type
          %input.form-control{:name => "fields[][sample_value]", :value => field.sample_value, :type => field_description.input_type}
        - else
          = text_field_tag "fields[][sample_value]", field.sample_value, :class => 'form-control'

  - if field_description.has_possible_values
    .form-group
      %label.col-sm-3.control-label Possible values
      .col-sm-9
        .option-list
          - if field.possible_values && field.possible_values.any?
            - field.possible_values.each_with_index do |value, i|
              %p{:class => ('input-group' if i > 1)}
                = text_field_tag "fields[]possible_values[]", value, :class => 'form-control'
                - if i > 1
                  %span{:class => "input-group-addon"}
                    %a.remove-option{:href => "#"}
                      %span{:class => 'glyphicon glyphicon-remove'}
          - else
            %p
              = text_field_tag "fields[]possible_values[]", nil, :class => 'form-control'
            %p
              = text_field_tag "fields[]possible_values[]", nil, :class => 'form-control'
        %p= link_to "Add another", "#", :class => "add-option"

  - if field_description.has_other_field
    .form-group
      %label.col-sm-3.control-label Add 'other' option?
      .col-sm-9
        = check_box_tag "fields[][allow_other]",  true, field.allow_other, :class => 'form-control check'

  - if field_description.has_minimum
    .form-group
      %label.col-sm-3.control-label Minimum
      .col-sm-9
        = text_field_tag "fields[][minimum]", field.minimum, :class => 'form-control'

  - if field_description.has_maximum
    .form-group
      %label.col-sm-3.control-label Maximum
      .col-sm-9
        = text_field_tag "fields[][maximum]", field.maximum, :class => 'form-control'

  - if field_description.can_display_as_select
    .form-group
      %label.col-sm-3.control-label Interface to use for selection
      .col-sm-9
        %label.radio-inline
          = radio_button_tag "fields[][display_as_select]", false, !field.display_as_select, :id => "field_#{field.id}_display_as_radios", :class => 'radio', :style => 'font-size: 34px; margin-left: -18px;'
          Radio buttons (<i>recommended</i>)
        %label.radio-inline
          = radio_button_tag "fields[][display_as_select]", true, field.display_as_select, :id => "field_#{field.id}_display_as_select", :class => 'radio', :style => 'font-size: 34px; margin-left: -18px;'
          Drop-down menu
        %p.help-block (This only applies to the embeddable form generated by Swarmize.)
           

  .form-group
    %label.col-sm-3.control-label Compulsory?
    .col-sm-9
      = check_box_tag "fields[][compulsory]",  true, field.compulsory, :class => 'form-control check'

  .form-group
    %label.col-sm-3.control-label Field code
    .col-sm-9
      - if @swarm.has_opened?
        = text_field_tag "fields[][field_code]", field.field_code, :class => 'form-control', :disabled => true
      - else
        .field-code-block{:style => 'display: none'}
          = text_field_tag "fields[][field_code]", field.field_code, :class => 'form-control field-code'
          %p.note <b>Only</b> edit this if you know why you're doing it.
        %p.code-text-block
          %span.code-text= field.field_code
          %a.alter{:href => '#'} Alter

- unless @swarm.has_opened?
  = render :partial => 'field_code_update_js'
